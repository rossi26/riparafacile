---
// src/components/Auth.astro
---
<div id="netlify-identity-auth-container" class="p-4 border border-gray-300 rounded-lg shadow-md bg-white">
  <h2 class="text-xl font-semibold mb-4 text-gray-700">User Authentication</h2>
  <div id="auth-status" class="mb-4 text-gray-600">Loading authentication status...</div>

  <div data-netlify-identity-button class="netlify-identity-button-container space-y-2">
  </div>

  <div id="custom-signup-fields" class="hidden mt-4 space-y-3">
    <h3 class="text-lg font-medium text-gray-700">Create Account with Details</h3>
    <div>
      <label for="signup-username" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
      <input type="text" id="signup-username" placeholder="Choose a username" class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500" />
    </div>
    <div>
      <label for="signup-phone" class="block text-sm font-medium text-gray-700 mb-1">Phone Number (Optional)</label>
      <input type="tel" id="signup-phone" placeholder="Your phone number" class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500" />
    </div>
    <div>
      <label for="signup-plan" class="block text-sm font-medium text-gray-700 mb-1">Subscription Plan</label>
      <select id="signup-plan" class="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500">
        <option value="">Select a plan</option>
        <option value="basic">Basic Plan</option>
        <option value="premium">Premium Plan</option>
        <option value="enterprise">Enterprise Plan</option>
      </select>
    </div>
    <button id="custom-signup-trigger" class="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition duration-150">
      Proceed to Sign Up
    </button>
    <p class="text-xs text-gray-500">You'll enter email & password in the Netlify popup.</p>
  </div>

  <div id="auth-message" class="mt-3 text-sm"></div>
</div>

<script is:inline>
  function loadNetlifyIdentityWidget() {
    if (document.getElementById('netlify-identity-widget-script')) {
      if (window.netlifyIdentity) {
        initializeNetlifyIdentity();
      } else {
        console.warn("Auth.astro: Netlify Identity script tag found, but widget not initialized. Waiting for it.");
        const scriptTag = document.getElementById('netlify-identity-widget-script');
        if(scriptTag && !scriptTag.dataset.onloadAttached) { 
            scriptTag.addEventListener('load', initializeNetlifyIdentity);
            scriptTag.dataset.onloadAttached = 'true';
        } else if (!scriptTag) {
            addNetlifyScript();
        }
      }
      return;
    }
    addNetlifyScript();
  }

  function addNetlifyScript() {
    const netlifyIdentityScript = document.createElement('script');
    netlifyIdentityScript.id = 'netlify-identity-widget-script';
    netlifyIdentityScript.src = 'https://identity.netlify.com/v1/netlify-identity-widget.js';
    netlifyIdentityScript.async = true;
    document.head.appendChild(netlifyIdentityScript);
    netlifyIdentityScript.onload = () => {
      console.log("Auth.astro: Netlify Identity Widget script loaded.");
      initializeNetlifyIdentity();
    };
    netlifyIdentityScript.onerror = () => {
        console.error("Auth.astro: Failed to load Netlify Identity Widget script.");
        showAuthMessage("Authentication service script failed to load.", "error");
    };
  }

  function showAuthMessage(message, type = 'info') {
    const messageEl = document.getElementById('auth-message');
    if (messageEl) {
      messageEl.textContent = message;
      messageEl.className = `mt-3 text-sm ${type === 'error' ? 'text-red-500 font-semibold' : (type === 'success' ? 'text-green-600 font-semibold' : 'text-gray-600')}`;
    }
  }

  function updateAuthDisplay(user) {
    const authStatusEl = document.getElementById('auth-status');
    const customSignupFields = document.getElementById('custom-signup-fields');
    
    if (authStatusEl) {
      if (user) {
        authStatusEl.innerHTML = `Logged in as: <strong class="font-medium">${user.user_metadata?.full_name || user.email}</strong>.`;
        if (customSignupFields) customSignupFields.classList.add('hidden');
      } else {
        authStatusEl.textContent = 'You are not logged in. Sign up or log in below.';
        if (customSignupFields) customSignupFields.classList.remove('hidden');
      }
    }
  }

  // Prepara i dati per la sincronizzazione, principalmente da localStorage per il flusso di signup.
  function getCustomSignupDataForBackend(netlifyUser) {
    if (!netlifyUser) return { username: null, phone: null, subscription_plan: null };
    const emailPart = netlifyUser.email ? netlifyUser.email.split('@')[0] : 'user';
    
    // Questi valori provengono dal form di signup personalizzato
    const signupUsername = localStorage.getItem('signupUsername');
    const signupPhone = localStorage.getItem('signupPhone');
    const signupPlan = localStorage.getItem('signupPlan');

    // Se signupUsername non è in localStorage (es. login normale), usa full_name o email.
    // Phone e plan saranno null se non erano in localStorage (cioè, non è il primo login post-signup).
    return {
        username: signupUsername || netlifyUser.user_metadata?.full_name || emailPart,
        phone: signupPhone, // Può essere null se non fornito o non è il flusso di signup
        subscription_plan: signupPlan // Può essere null se non fornito o non è il flusso di signup
    };
  }

  async function syncUserDataWithBackend(netlifyUser, userDataToSync) {
    // Controlla il token PRIMA di mostrare "Syncing..." o fare qualsiasi altra cosa
    if (!netlifyUser || !netlifyUser.token || !netlifyUser.token.access_token) {
      console.error('Auth.astro (syncUserDataWithBackend): Netlify user, token, or access_token missing. Sync aborted.');
      // Mostra l'errore solo se stiamo effettivamente cercando di sincronizzare dati significativi (es. da signup)
      if (localStorage.getItem('signupPlan')) { // Un buon indicatore che siamo nel flusso post-signup
          showAuthMessage('Profile sync failed: Unauthorized: No user context or token.', 'error');
      }
      return; // Interrompi la sincronizzazione
    }

    if (!userDataToSync.username || userDataToSync.username.trim() === '') {
        console.warn('Auth.astro (syncUserDataWithBackend): Username to sync is undefined or empty. Sync aborted.');
        return; 
    }
    
    // Mostra "Syncing profile..." solo se stiamo effettivamente per fare una chiamata con dati rilevanti
    console.log("Auth.astro: Attempting to sync user data with backend.");
    showAuthMessage('Syncing profile with backend...', 'info');
    
    const payload = { 
      username: userDataToSync.username.trim(),
    };

    // Includi phone e plan solo se sono stati forniti (non null e non undefined)
    // Questo è importante perché localStorage.getItem può restituire null
    if (userDataToSync.phone !== null && userDataToSync.phone !== undefined) {
      payload.phone = userDataToSync.phone; // La funzione server gestirà il trim e il null se vuoto
    }
    if (userDataToSync.subscription_plan !== null && userDataToSync.subscription_plan !== undefined && userDataToSync.subscription_plan.trim() !== '') {
      payload.subscription_plan = userDataToSync.subscription_plan;
    }
    
    console.log("Auth.astro: Payload for set-user-data:", payload);

    try {
      const response = await fetch('/.netlify/functions/set-user-data', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${netlifyUser.token.access_token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || data.details || `Server error ${response.status}`);
      }

      console.log('Auth.astro: Set user data response:', data);
      showAuthMessage(`Profile synced! Username: ${data.profile?.username || payload.username}`, 'success');
      document.dispatchEvent(new CustomEvent('userProfileUpdated', { detail: data }));

    } catch (err) {
      console.error('Auth.astro: Error calling set-user-data:', err);
      showAuthMessage(`Profile sync failed: ${err.message}`, 'error');
      document.dispatchEvent(new CustomEvent('userProfileUpdated', { detail: null, error: err.message }));
    }
  }

  function initializeNetlifyIdentity() {
    if (window.netlifyIdentityInitialized) {
      console.log("Auth.astro: Netlify Identity already initialized by this script.");
      return;
    }
    window.netlifyIdentityInitialized = true;

    const netlifyIdentity = window.netlifyIdentity;
    if (!netlifyIdentity) {
        console.error("Auth.astro: Netlify Identity widget not loaded onto window object.");
        showAuthMessage("Authentication service failed to load properly.", "error");
        return;
    }
     
    console.log("Auth.astro: Dispatching netlifyIdentityReady event.");
    window.dispatchEvent(new Event('netlifyIdentityReady'));

    netlifyIdentity.on('init', (user) => {
      console.log('Auth.astro: Netlify Identity init event. User:', user);
      updateAuthDisplay(user); 
      if (user) {
        if (user.token && user.token.access_token) {
            console.log('Auth.astro init: User and token available. Dispatching userLoggedIn.');
            document.dispatchEvent(new CustomEvent('userLoggedIn', { detail: user }));
            // NON chiamare syncUserDataWithBackend qui per utenti esistenti al caricamento pagina.
        } else {
            console.warn("Auth.astro init: User object present, but token is missing. userLoggedIn event deferred.");
        }
      } else {
        console.log('Auth.astro init: No user. Dispatching userLoggedOut.');
        document.dispatchEvent(new CustomEvent('userLoggedOut'));
      }
    });

    netlifyIdentity.on('login', (user) => {
      console.log('Auth.astro: Netlify Identity login event. User:', user);
      updateAuthDisplay(user); 
      netlifyIdentity.close(); 
      showAuthMessage('Login successful! Welcome back.', 'success');
       
      if (user.token && user.token.access_token) {
        // Chiama syncUserDataWithBackend solo se ci sono dati rilevanti da localStorage (signup flow)
        const planFromStorage = localStorage.getItem('signupPlan');
        if (planFromStorage) { // Se il piano è in localStorage, è probabile che sia un flusso di signup
            const userDataToSync = getCustomSignupDataForBackend(user); 
            if (userDataToSync.username) { 
                syncUserDataWithBackend(user, userDataToSync);
            }
        } else {
            console.log("Auth.astro login: No specific signup data in localStorage to sync. Skipping set-user-data call.");
            // Potresti voler comunque aggiornare lo username se è cambiato, ma per ora lo omettiamo per evitare l'errore.
            // Se necessario, si potrebbe fare una chiamata a set-user-data solo con lo username.
        }
        document.dispatchEvent(new CustomEvent('userLoggedIn', { detail: user }));
      } else {
          console.error("Auth.astro login: User object present after login, but token is missing!");
          showAuthMessage('Login succeeded but token is missing. Profile sync may fail. Please try refreshing.', 'error');
          document.dispatchEvent(new CustomEvent('userLoggedIn', { detail: user })); // UserProfile gestirà il token mancante
      }
      
      // Pulisci localStorage in ogni caso dopo un login.
      localStorage.removeItem('signupUsername');
      localStorage.removeItem('signupPhone');
      localStorage.removeItem('signupPlan');
    });

    netlifyIdentity.on('logout', () => {
      console.log('Auth.astro: Netlify Identity logout event.');
      updateAuthDisplay(null); // Aggiorna UI di Auth.astro
      showAuthMessage('Logged out successfully.', 'info');
      document.dispatchEvent(new CustomEvent('userLoggedOut')); // Notifica gli altri componenti
      localStorage.removeItem('signupUsername'); 
      localStorage.removeItem('signupPhone');
      localStorage.removeItem('signupPlan');
    });

    netlifyIdentity.on('error', (err) => {
      console.error('Auth.astro: Netlify Identity Error:', err);
      showAuthMessage(`Auth Error: ${err.message || 'An unknown error occurred.'}`, 'error');
    });

    netlifyIdentity.on('open', (modalType) => {
      console.log('Auth.astro: Netlify Identity modal opened:', modalType);
    });
    
    const customSignupTrigger = document.getElementById('custom-signup-trigger');
    const signupUsernameEl = document.getElementById('signup-username');
    const signupPhoneEl = document.getElementById('signup-phone');
    const signupPlanEl = document.getElementById('signup-plan');

    if (customSignupTrigger && signupUsernameEl && signupPhoneEl && signupPlanEl) {
      customSignupTrigger.addEventListener('click', () => {
        const username = signupUsernameEl.value.trim();
        const phone = signupPhoneEl.value.trim(); 
        const plan = signupPlanEl.value; 

        if (!username) {
          showAuthMessage('Please enter a username to proceed with signup.', 'error');
          signupUsernameEl.focus();
          return;
        }
        if (!plan) { 
            showAuthMessage('Please select a subscription plan.', 'error');
            signupPlanEl.focus();
            return;
        }

        localStorage.setItem('signupUsername', username);
        localStorage.setItem('signupPhone', phone); 
        localStorage.setItem('signupPlan', plan);
        
        netlifyIdentity.open('signup'); 
      });
    }
    
    // Controllo iniziale dello stato utente alla fine dell'inizializzazione
    const currentUser = netlifyIdentity.currentUser();
    console.log("Auth.astro: Initial check for current user after all event listeners set up:", currentUser);
    updateAuthDisplay(currentUser); 
    if (currentUser) {
      if (currentUser.token && currentUser.token.access_token) {
        console.log("Auth.astro initial check (end of init): Current user and token available. Dispatching userLoggedIn.");
        document.dispatchEvent(new CustomEvent('userLoggedIn', { detail: currentUser }));
        // NON chiamare syncUserDataWithBackend qui.
      } else {
         console.warn("Auth.astro initial check (end of init): Current user exists but token missing. userLoggedIn event deferred.");
      }
    } else {
      // Se nessun utente, l'evento 'init' dovrebbe aver già gestito 'userLoggedOut'.
    }
  }
  
  loadNetlifyIdentityWidget();

</script>
<style>
  .netlify-identity-button-container button {
    margin-top: 0.5rem;
  }
</style>
