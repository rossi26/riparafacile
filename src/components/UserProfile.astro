---
// src/components/UserProfile.astro
// Displays user profile data fetched from Supabase via get-user-data Netlify function
---
<div id="user-profile-container" class="p-4 border border-gray-300 rounded-lg shadow-md bg-white mt-6 hidden">
  <h3 class="text-lg font-semibold mb-3 text-gray-700">Your Supabase Profile</h3>
  <div id="profile-loading" class="text-gray-500">Loading profile...</div>
  <div id="profile-data" class="hidden space-y-1">
    <p class="text-gray-800"><strong>Full Name:</strong> <span id="profile-full-name" class="font-normal text-gray-600"></span></p>
    <p class="text-gray-800"><strong>Email (from Netlify):</strong> <span id="profile-email" class="font-normal text-gray-600"></span></p>
    <p class="text-gray-800"><strong>Username (from Supabase):</strong> <span id="profile-username" class="font-bold text-blue-600"></span></p>
    <p class="text-gray-800"><strong>Netlify User ID:</strong> <span id="profile-netlify-id" class="font-normal text-gray-600 text-xs"></span></p>
    <p class="text-gray-800"><strong>Phone:</strong> <span id="profile-phone" class="font-normal text-gray-600"></span></p>
    <p class="text-gray-800"><strong>Subscription Plan:</strong> <span id="profile-plan" class="font-normal text-gray-600"></span></p>
    <p class="text-gray-800"><strong>Profile Created:</strong> <span id="profile-created-at" class="font-normal text-gray-600 text-xs"></span></p>
    <p class="text-gray-800"><strong>Last Updated:</strong> <span id="profile-updated-at" class="font-normal text-gray-600 text-xs"></span></p>
  </div>
  <div id="profile-error" class="text-red-500 hidden"></div>
</div>

<script is:inline>
  // Ensure this script block only initializes once
  if (!window.myAppUserProfileGlobalInit) {
    window.myAppUserProfileGlobalInit = true;

    const userProfileContainerEl = document.getElementById('user-profile-container');
    const profileLoadingEl = document.getElementById('profile-loading');
    const profileDataEl = document.getElementById('profile-data');
    const profileErrorEl = document.getElementById('profile-error');
    let isFetchingSupabaseProfile = false;

    function displaySupabaseProfileData(data) {
      if (!profileDataEl || !userProfileContainerEl) {
        console.error("UserProfile: UI elements for displaying data not found.");
        return;
      }
      console.log('UserProfile: Displaying profile data:', data);

      document.getElementById('profile-full-name').textContent = data.name || 'N/A';
      document.getElementById('profile-email').textContent = data.email || 'N/A';
      document.getElementById('profile-username').textContent = data.username || 'N/A';
      document.getElementById('profile-netlify-id').textContent = data.netlify_id || 'N/A';
      document.getElementById('profile-phone').textContent = data.phone || 'N/A';
      document.getElementById('profile-plan').textContent = data.subscription_plan || 'N/A';
      document.getElementById('profile-created-at').textContent = data.created_at ? new Date(data.created_at).toLocaleString() : 'N/A';
      document.getElementById('profile-updated-at').textContent = data.updated_at ? new Date(data.updated_at).toLocaleString() : 'N/A';
      
      if (profileLoadingEl) profileLoadingEl.classList.add('hidden');
      profileDataEl.classList.remove('hidden');
      if (profileErrorEl) profileErrorEl.classList.add('hidden');
      userProfileContainerEl.classList.remove('hidden'); // Ensure container is visible
    }

    function displaySupabaseProfileError(message) {
      if (profileErrorEl && userProfileContainerEl) {
        profileErrorEl.textContent = message;
        profileErrorEl.classList.remove('hidden');
        userProfileContainerEl.classList.remove('hidden'); // Show container to display error
      }
      if (profileLoadingEl) profileLoadingEl.classList.add('hidden'); 
      if (profileDataEl) profileDataEl.classList.add('hidden'); 
    }

    async function fetchUserSupabaseProfile() {
      if (isFetchingSupabaseProfile) {
          console.log("UserProfile: Fetch already in progress. Skipping.");
          return;
      }
      isFetchingSupabaseProfile = true;
      console.log("UserProfile: Attempting to fetch Supabase profile.");

      if (!window.netlifyIdentity) {
          console.warn("UserProfile: Netlify Identity not available on window. Cannot fetch profile yet.");
          handleUserLoggedOutUiChanges(); // Ensure UI is in logged out state
          isFetchingSupabaseProfile = false;
          return;
      }
      
      const netlifyUser = window.netlifyIdentity.currentUser();

      if (!netlifyUser) {
        console.warn("UserProfile: No Netlify user currently logged in. Resetting UI.");
        handleUserLoggedOutUiChanges();
        isFetchingSupabaseProfile = false;
        return;
      }

      if (!netlifyUser.token || !netlifyUser.token.access_token) {
        console.warn("UserProfile: User exists but token is missing or not ready for get-user-data call.");
        // Show loading, but don't show an aggressive error as token might become available from Auth.astro's init/login
        if (userProfileContainerEl) userProfileContainerEl.classList.remove('hidden');
        if (profileLoadingEl) profileLoadingEl.classList.remove('hidden'); // Show loading
        if (profileDataEl) profileDataEl.classList.add('hidden');
        if (profileErrorEl) profileErrorEl.classList.add('hidden');
        // displaySupabaseProfileError('Authentication token not ready. Please wait or log in again.'); // Avoid showing error too soon
        isFetchingSupabaseProfile = false;
        return;
      }
      
      // Prepare UI for loading state
      if (userProfileContainerEl) userProfileContainerEl.classList.remove('hidden');
      if (profileLoadingEl) profileLoadingEl.classList.remove('hidden');
      if (profileDataEl) profileDataEl.classList.add('hidden');
      if (profileErrorEl) profileErrorEl.classList.add('hidden');

      try {
        const response = await fetch('/.netlify/functions/get-user-data', {
          method: 'GET',
          headers: { 'Authorization': `Bearer ${netlifyUser.token.access_token}` },
        });
        const responseData = await response.json(); // Try to parse JSON first
        
        if (!response.ok) {
          console.error(`UserProfile: Error from get-user-data. Status: ${response.status}`, responseData);
          throw new Error(responseData.error || responseData.details || `Server error ${response.status}`);
        }
        displaySupabaseProfileData(responseData);
      } catch (error) {
        console.error('UserProfile: Error fetching user Supabase profile:', error);
        displaySupabaseProfileError(`Failed to load profile: ${error.message}`);
      } finally {
          isFetchingSupabaseProfile = false;
      }
    }

    // Called when userLoggedIn event is dispatched by Auth.astro
    function handleUserLoggedInUiSetup(event) {
      console.log('UserProfile: userLoggedIn event detected.', event.detail ? event.detail.email : 'No user detail');
      if (userProfileContainerEl) userProfileContainerEl.classList.remove('hidden'); // Show the profile section
      if (profileLoadingEl) profileLoadingEl.classList.remove('hidden'); // Show loading message
      if (profileDataEl) profileDataEl.classList.add('hidden'); // Hide old data
      if (profileErrorEl) profileErrorEl.classList.add('hidden'); // Hide old errors
      fetchUserSupabaseProfile();
    }

    // Called when userLoggedOut event is dispatched by Auth.astro
    function handleUserLoggedOutUiChanges() {
      console.log('UserProfile: userLoggedOut event detected. Resetting UI.');
      
      if (userProfileContainerEl) userProfileContainerEl.classList.add('hidden'); // Hide the whole section

      const fieldsToClear = ['profile-full-name', 'profile-email', 'profile-username', 'profile-netlify-id', 'profile-phone', 'profile-plan', 'profile-created-at', 'profile-updated-at'];
      fieldsToClear.forEach(id => {
          const el = document.getElementById(id);
          if (el) el.textContent = ''; // Clear text content
      });

      if (profileDataEl) profileDataEl.classList.add('hidden');
      if (profileErrorEl) {
          profileErrorEl.classList.add('hidden');
          profileErrorEl.textContent = ''; 
      }
      if (profileLoadingEl) { 
          profileLoadingEl.textContent = 'Loading profile...';
          // profileLoadingEl should remain hidden if userProfileContainerEl is hidden
      }
    }
    
    document.addEventListener('userLoggedIn', handleUserLoggedInUiSetup);
    document.addEventListener('userLoggedOut', handleUserLoggedOutUiChanges);

    // Handle updates coming from set-user-data (e.g., if username was synced on login)
    document.addEventListener('userProfileUpdated', (event) => {
      console.log('UserProfile: userProfileUpdated event received:', event.detail);
      if (event.detail && event.detail.profile) { 
          displaySupabaseProfileData(event.detail.profile);
      } else if (event.detail && event.detail.error) {
          console.error("UserProfile: userProfileUpdated event indicated an error from sync:", event.detail.error);
          // Optionally, display this error, or let the next fetchUserSupabaseProfile handle it.
          // displaySupabaseProfileError(`Profile sync update failed: ${event.detail.error}`);
      } else if (event.detail && event.detail.email && event.detail.username) { // Fallback for flat profile data
          console.warn("UserProfile: userProfileUpdated event with unexpected data structure, attempting to display.", event.detail);
          displaySupabaseProfileData(event.detail);
      }
    });
     
    function initialProfileLoad() {
      console.log("UserProfile: Initial profile load check.");
      const netlifyIdentityInstance = window.netlifyIdentity;

      if (netlifyIdentityInstance) {
          const currentUser = netlifyIdentityInstance.currentUser();
          if (currentUser) {
              console.log("UserProfile (initialProfileLoad): User already logged in via Netlify Identity. Setting up UI for fetch.");
              handleUserLoggedInUiSetup({ detail: currentUser }); 
          } else {
              console.log("UserProfile (initialProfileLoad): Netlify Identity loaded, but no current user. Ensuring UI is logged out.");
              handleUserLoggedOutUiChanges(); 
          }
      } else {
          console.log("UserProfile (initialProfileLoad): Netlify Identity not yet loaded. Waiting for 'netlifyIdentityReady'.");
          window.addEventListener('netlifyIdentityReady', () => {
              console.log("UserProfile: netlifyIdentityReady event received in initialProfileLoad.");
              const readyCurrentUser = window.netlifyIdentity?.currentUser();
              if(readyCurrentUser){
                  handleUserLoggedInUiSetup({ detail: readyCurrentUser });
              } else {
                  handleUserLoggedOutUiChanges(); 
              }
          }, { once: true });
      }
    }
    
    // Start the initial load check
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initialProfileLoad, {once: true});
    } else {
      initialProfileLoad(); 
    }
  }
</script>
