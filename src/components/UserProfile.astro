---
// src/components/UserProfile.astro
---
<div id="user-profile-container" class="p-4 border border-gray-300 rounded-lg shadow-md bg-white mt-6 hidden">
  <h3 class="text-lg font-semibold mb-3 text-gray-700">Your Supabase Profile</h3>
  <div id="profile-loading" class="text-gray-500">Loading profile...</div>
  <div id="profile-data" class="hidden space-y-1">
    <p class="text-gray-800"><strong>Email (from Netlify):</strong> <span id="profile-email" class="font-normal text-gray-600"></span></p>
    <p class="text-gray-800"><strong>Username (from Supabase):</strong> <span id="profile-username" class="font-bold text-blue-600"></span></p>
    <p class="text-gray-800"><strong>Netlify User ID:</strong> <span id="profile-netlify-id" class="font-normal text-gray-600 text-xs"></span></p>
    
    <p class="text-gray-800"><strong>Phone:</strong> <span id="profile-phone" class="font-normal text-gray-600"></span></p>
    <p class="text-gray-800"><strong>Subscription Plan:</strong> <span id="profile-plan" class="font-normal text-gray-600"></span></p>
    
    <p class="text-gray-800"><strong>Profile Created:</strong> <span id="profile-created-at" class="font-normal text-gray-600 text-xs"></span></p>
    <p class="text-gray-800"><strong>Last Updated:</strong> <span id="profile-updated-at" class="font-normal text-gray-600 text-xs"></span></p>
  </div>
  <div id="profile-error" class="text-red-500 hidden"></div>
</div>

<script is:inline>
  const userProfileContainerEl = document.getElementById('user-profile-container');
  const profileLoadingEl = document.getElementById('profile-loading');
  const profileDataEl = document.getElementById('profile-data');
  const profileErrorEl = document.getElementById('profile-error');

  function displaySupabaseProfileData(data) {
    if (!profileDataEl || !userProfileContainerEl) return;

    // *** LOG PER DEBUG: Controllas la console del browser ***
    console.log('Data received by displaySupabaseProfileData:', data);

    document.getElementById('profile-email').textContent = data.email || 'N/A';
    document.getElementById('profile-username').textContent = data.username || 'N/A';
    document.getElementById('profile-netlify-id').textContent = data.netlify_id || 'N/A';
    
    // *** ACCEDI AI CAMPI CORRETTI ***
    document.getElementById('profile-phone').textContent = data.phone || 'N/A';
    document.getElementById('profile-plan').textContent = data.subscription_plan || 'N/A';
    
    document.getElementById('profile-created-at').textContent = data.created_at ? new Date(data.created_at).toLocaleString() : 'N/A';
    document.getElementById('profile-updated-at').textContent = data.updated_at ? new Date(data.updated_at).toLocaleString() : 'N/A';
     
    if (profileLoadingEl) profileLoadingEl.classList.add('hidden');
    profileDataEl.classList.remove('hidden');
    if (profileErrorEl) profileErrorEl.classList.add('hidden');
    userProfileContainerEl.classList.remove('hidden');
  }

  function displaySupabaseProfileError(message) {
    if (profileErrorEl && userProfileContainerEl) {
      profileErrorEl.textContent = message;
      profileErrorEl.classList.remove('hidden');
      userProfileContainerEl.classList.remove('hidden');
    }
    if (profileLoadingEl) profileLoadingEl.classList.add('hidden');
    if (profileDataEl) profileDataEl.classList.add('hidden');
  }

  async function fetchUserSupabaseProfile() {
    if (!window.netlifyIdentity || !window.netlifyIdentity.currentUser()) {
      if (userProfileContainerEl) userProfileContainerEl.classList.add('hidden');
      return;
    }

    const netlifyUser = window.netlifyIdentity.currentUser();
    if (!netlifyUser || !netlifyUser.token || !netlifyUser.token.access_token) {
      displaySupabaseProfileError('Authentication token is missing. Cannot fetch profile.');
      if (userProfileContainerEl) userProfileContainerEl.classList.remove('hidden');
      return;
    }
     
    if (userProfileContainerEl) userProfileContainerEl.classList.remove('hidden');
    if (profileLoadingEl) profileLoadingEl.classList.remove('hidden');
    if (profileDataEl) profileDataEl.classList.add('hidden');
    if (profileErrorEl) profileErrorEl.classList.add('hidden');

    try {
      const response = await fetch('/.netlify/functions/get-user-data', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${netlifyUser.token.access_token}`,
        },
      });

      let responseData; // Rinomina la variabile per evitare confusione con 'data' globale
      try {
        responseData = await response.json();
      } catch (e) {
        console.error('Failed to parse JSON response from get-user-data:', e);
        throw new Error(`Error ${response.status}: ${response.statusText || 'Failed to retrieve data, and response was not valid JSON.'}`);
      }

      if (!response.ok) {
        throw new Error(responseData.error || responseData.details || `Error ${response.status}: ${response.statusText}`);
      }
       
      // Passa responseData che contiene il profilo utente
      displaySupabaseProfileData(responseData); 

    } catch (error) {
      console.error('Error fetching user Supabase profile:', error);
      displaySupabaseProfileError(`Failed to load profile: ${error.message}`);
    }
  }

  function handleLogin(event) { // Aggiunto 'event' sebbene non usato qui, per coerenza
    console.log('User logged in event detected by UserProfile, attempting to fetch Supabase profile...');
    if (window.netlifyIdentity && window.netlifyIdentity.currentUser()){
        fetchUserSupabaseProfile();
    } else {
        console.log("UserProfile: Netlify Identity not ready or no current user, deferring profile fetch to 'netlifyIdentityReady'.");
        window.addEventListener('netlifyIdentityReady', fetchUserSupabaseProfile, { once: true });
    }
  }

  document.addEventListener('userLoggedIn', handleLogin);

  document.addEventListener('userLoggedOut', () => {
    if (userProfileContainerEl) userProfileContainerEl.classList.add('hidden');
    if (profileDataEl) profileDataEl.classList.add('hidden');
    if (profileErrorEl) {
        profileErrorEl.classList.add('hidden');
        profileErrorEl.textContent = '';
    }
    if (profileLoadingEl) {
        profileLoadingEl.classList.remove('hidden'); 
        profileLoadingEl.textContent = 'Loading profile...';
    }
    console.log('User logged out, Supabase profile hidden.');
  });

  document.addEventListener('userProfileUpdated', (event) => {
    console.log('UserProfile: userProfileUpdated event received:', event.detail);
    // La funzione set-user-data ora restituisce un oggetto { message: "...", profile: {...} }
    // Quindi dobbiamo accedere a event.detail.profile
    if (event.detail && event.detail.profile) { 
        displaySupabaseProfileData(event.detail.profile);
    } else if (event.detail && !event.detail.profile && !event.detail.error) {
        // Potrebbe essere il vecchio formato, o un oggetto dati piatto se la logica di set-user-data è cambiata
        console.warn("UserProfile: userProfileUpdated event received data without a 'profile' property. Displaying raw detail:", event.detail);
        displaySupabaseProfileData(event.detail); // Prova a visualizzare event.detail direttamente
    } else if (event.detail && event.detail.error) {
        console.error("UserProfile: userProfileUpdated event indicated an error:", event.detail.error);
        // Potresti voler mostrare un errore qui o lasciare che fetchUserSupabaseProfile lo gestisca al prossimo caricamento
    }
  });
   
  function initialProfileLoad() {
    console.log("UserProfile: Initial profile load check.");
    if (window.netlifyIdentity && window.netlifyIdentity.currentUser()) {
        console.log("UserProfile: User already logged in, fetching profile.");
        fetchUserSupabaseProfile();
    } else if (window.netlifyIdentity) {
        console.log("UserProfile: User not logged in, ensuring profile is hidden.");
        if (userProfileContainerEl) userProfileContainerEl.classList.add('hidden');
    } else {
        console.log("UserProfile: Netlify Identity not yet loaded, waiting for 'netlifyIdentityReady'.");
        // Aggiunge l'event listener solo se netlifyIdentity non è ancora definito
        window.addEventListener('netlifyIdentityReady', initialProfileLoad, { once: true });
    }
  }
  
  // Esegui initialProfileLoad quando il DOM è pronto o la pagina è completamente caricata
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialProfileLoad, {once: true});
  } else {
    initialProfileLoad(); // DOM già pronto o pagina caricata
  }

</script>
